local LU = require('kengen2.ThirdParty.luaunit.luaunit')
local StringUtil = require("kengen2.Util.StringUtil")

Test_StringUtil = {}

function Test_StringUtil:Test_Unit_StartsWith()
	LU.assertTrue(StringUtil.StartsWith("foo", ""))
	LU.assertTrue(StringUtil.StartsWith("foo", "f"))
	LU.assertTrue(StringUtil.StartsWith("foo", "fo"))
	LU.assertTrue(StringUtil.StartsWith("foo", "foo"))
	
	LU.assertFalse(StringUtil.StartsWith("foo", "o"))
	LU.assertFalse(StringUtil.StartsWith("foo", " "))
	LU.assertFalse(StringUtil.StartsWith("foo", ".")) -- make sure it is not treated as regex
	
	LU.assertError(function()
		StringUtil.StartsWith("foo", nil)
	end)
	LU.assertError(function()
		StringUtil.StartsWith("foo", 1)
	end)
	LU.assertError(function()
		StringUtil.StartsWith("foo", {"f"})
	end)

	LU.assertError(function()
		StringUtil.StartsWith(nil, "f")
	end)
	LU.assertError(function()
		StringUtil.StartsWith(1, "f")
	end)
	LU.assertError(function()
		StringUtil.StartsWith({"foo"}, "f")
	end)
end

function Test_StringUtil:Test_Unit_Trim()
	LU.assertEquals(StringUtil.Trim(""), "")
	LU.assertEquals(StringUtil.Trim(" "), "")
	LU.assertEquals(StringUtil.Trim("	"), "")
	LU.assertEquals(StringUtil.Trim("  "), "")
	
	-- content in middle with spaces or tabs on outside
	LU.assertEquals(StringUtil.Trim(" a"), "a")
	LU.assertEquals(StringUtil.Trim("a "), "a")
	LU.assertEquals(StringUtil.Trim("a  "), "a")
	LU.assertEquals(StringUtil.Trim("  a"), "a")
	LU.assertEquals(StringUtil.Trim(" a "), "a")
	LU.assertEquals(StringUtil.Trim("	a"), "a")
	LU.assertEquals(StringUtil.Trim("a	"), "a")
	LU.assertEquals(StringUtil.Trim("	a	"), "a")
	
	-- spaces in middle
	LU.assertEquals(StringUtil.Trim(" a b"), "a b")
	LU.assertEquals(StringUtil.Trim("a b "), "a b")
	LU.assertEquals(StringUtil.Trim("a b  "), "a b")
	LU.assertEquals(StringUtil.Trim("  a b"), "a b")
	LU.assertEquals(StringUtil.Trim(" a b "), "a b")
	LU.assertEquals(StringUtil.Trim("	a b"), "a b")
	LU.assertEquals(StringUtil.Trim("a b	"), "a b")
	LU.assertEquals(StringUtil.Trim("	a b	"), "a b")
	
	-- tabs in middle (a tab b)
	LU.assertEquals(StringUtil.Trim(" a	b"), "a	b")
	LU.assertEquals(StringUtil.Trim("a	b "), "a	b")
	LU.assertEquals(StringUtil.Trim("a	b  "), "a	b")
	LU.assertEquals(StringUtil.Trim("  a	b"), "a	b")
	LU.assertEquals(StringUtil.Trim(" a	b "), "a	b")
	LU.assertEquals(StringUtil.Trim("	a	b"), "a	b")
	LU.assertEquals(StringUtil.Trim("a	b	"), "a	b")
	LU.assertEquals(StringUtil.Trim("	a	b	"), "a	b")
	
	-- newlines
	LU.assertEquals(StringUtil.Trim("\na	b"), "a	b")
	LU.assertEquals(StringUtil.Trim("\r\na	b"), "a	b")
	LU.assertEquals(StringUtil.Trim("a	b\n"), "a	b")
	LU.assertEquals(StringUtil.Trim("a	b\r\n"), "a	b")
	LU.assertEquals(StringUtil.Trim("\na	b"), "a	b")
	LU.assertEquals(StringUtil.Trim("\na	b\n"), "a	b")
	LU.assertEquals(StringUtil.Trim("\na	b\r"), "a	b")
	LU.assertEquals(StringUtil.Trim("a	b\n"), "a	b")
	LU.assertEquals(StringUtil.Trim("\na	b\n"), "a	b")

	LU.assertError(function()
		StringUtil.Trim(nil)
	end)
	LU.assertError(function()
		StringUtil.Trim(1)
	end)
	LU.assertError(function()
		StringUtil.Trim({"foo"})
	end)
end

function Test_StringUtil:Test_Unit_TrimStart()
	LU.assertEquals(StringUtil.TrimStart(""), "")
	LU.assertEquals(StringUtil.TrimStart(" "), "")
	LU.assertEquals(StringUtil.TrimStart("	"), "")
	LU.assertEquals(StringUtil.TrimStart("  "), "")
	
	-- content in middle with spaces or tabs on outside
	LU.assertEquals(StringUtil.TrimStart(" a"), "a")
	LU.assertEquals(StringUtil.TrimStart("a "), "a ")
	LU.assertEquals(StringUtil.TrimStart("a  "), "a  ")
	LU.assertEquals(StringUtil.TrimStart("  a"), "a")
	LU.assertEquals(StringUtil.TrimStart(" a "), "a ")
	LU.assertEquals(StringUtil.TrimStart("	a"), "a")
	LU.assertEquals(StringUtil.TrimStart("a	"), "a	")
	LU.assertEquals(StringUtil.TrimStart("	a	"), "a	")
	
	-- spaces in middle
	LU.assertEquals(StringUtil.TrimStart(" a b"), "a b")
	LU.assertEquals(StringUtil.TrimStart("a b "), "a b ")
	LU.assertEquals(StringUtil.TrimStart("a b  "), "a b  ")
	LU.assertEquals(StringUtil.TrimStart("  a b"), "a b")
	LU.assertEquals(StringUtil.TrimStart(" a b "), "a b ")
	LU.assertEquals(StringUtil.TrimStart("	a b"), "a b")
	LU.assertEquals(StringUtil.TrimStart("a b	"), "a b	")
	LU.assertEquals(StringUtil.TrimStart("	a b	"), "a b	")
	
	-- tabs in middle (a tab b)
	LU.assertEquals(StringUtil.TrimStart(" a	b"), "a	b")
	LU.assertEquals(StringUtil.TrimStart("a	b "), "a	b ")
	LU.assertEquals(StringUtil.TrimStart("a	b  "), "a	b  ")
	LU.assertEquals(StringUtil.TrimStart("  a	b"), "a	b")
	LU.assertEquals(StringUtil.TrimStart(" a	b "), "a	b ")
	LU.assertEquals(StringUtil.TrimStart("	a	b"), "a	b")
	LU.assertEquals(StringUtil.TrimStart("a	b	"), "a	b	")
	LU.assertEquals(StringUtil.TrimStart("	a	b	"), "a	b	")
	
	-- newlines
	LU.assertEquals(StringUtil.TrimStart("\na	b"), "a	b")
	LU.assertEquals(StringUtil.TrimStart("\r\na	b"), "a	b")
	LU.assertEquals(StringUtil.TrimStart("a	b\n"), "a	b\n")
	LU.assertEquals(StringUtil.TrimStart("a	b\r\n"), "a	b\r\n")
	LU.assertEquals(StringUtil.TrimStart("\na	b"), "a	b")
	LU.assertEquals(StringUtil.TrimStart("\na	b\n"), "a	b\n")
	LU.assertEquals(StringUtil.TrimStart("\na	b\r"), "a	b\r")
	LU.assertEquals(StringUtil.TrimStart("a	b\n"), "a	b\n")
	LU.assertEquals(StringUtil.TrimStart("\na	b\n"), "a	b\n")
	
	LU.assertError(function()
		StringUtil.TrimStart(nil)
	end)
	LU.assertError(function()
		StringUtil.TrimStart(1)
	end)
	LU.assertError(function()
		StringUtil.TrimStart({"foo"})
	end)
end

function Test_StringUtil:Test_Unit_End()
	LU.assertEquals(StringUtil.TrimEnd(""), "")
	LU.assertEquals(StringUtil.TrimEnd(" "), "")
	LU.assertEquals(StringUtil.TrimEnd("	"), "")
	LU.assertEquals(StringUtil.TrimEnd("  "), "")
	
	-- content in middle with spaces or tabs on outside
	LU.assertEquals(StringUtil.TrimEnd(" a"), " a")
	LU.assertEquals(StringUtil.TrimEnd("a "), "a")
	LU.assertEquals(StringUtil.TrimEnd("a  "), "a")
	LU.assertEquals(StringUtil.TrimEnd("  a"), "  a")
	LU.assertEquals(StringUtil.TrimEnd(" a "), " a")
	LU.assertEquals(StringUtil.TrimEnd("	a"), "	a")
	LU.assertEquals(StringUtil.TrimEnd("a	"), "a")
	LU.assertEquals(StringUtil.TrimEnd("	a	"), "	a")
	
	-- spaces in middle
	LU.assertEquals(StringUtil.TrimEnd(" a b"), " a b")
	LU.assertEquals(StringUtil.TrimEnd("a b "), "a b")
	LU.assertEquals(StringUtil.TrimEnd("a b  "), "a b")
	LU.assertEquals(StringUtil.TrimEnd("  a b"), "  a b")
	LU.assertEquals(StringUtil.TrimEnd(" a b "), " a b")
	LU.assertEquals(StringUtil.TrimEnd("	a b"), "	a b")
	LU.assertEquals(StringUtil.TrimEnd("a b	"), "a b")
	LU.assertEquals(StringUtil.TrimEnd("	a b	"), "	a b")
	
	-- tabs in middle (a tab b)
	LU.assertEquals(StringUtil.TrimEnd(" a	b"), " a	b")
	LU.assertEquals(StringUtil.TrimEnd("a	b "), "a	b")
	LU.assertEquals(StringUtil.TrimEnd("a	b  "), "a	b")
	LU.assertEquals(StringUtil.TrimEnd("  a	b"), "  a	b")
	LU.assertEquals(StringUtil.TrimEnd(" a	b "), " a	b")
	LU.assertEquals(StringUtil.TrimEnd("	a	b"), "	a	b")
	LU.assertEquals(StringUtil.TrimEnd("a	b	"), "a	b")
	LU.assertEquals(StringUtil.TrimEnd("	a	b	"), "	a	b")
	
	-- newlines
	LU.assertEquals(StringUtil.TrimEnd("\na	b"), "\na	b")
	LU.assertEquals(StringUtil.TrimEnd("\r\na	b"), "\r\na	b")
	LU.assertEquals(StringUtil.TrimEnd("a	b\n"), "a	b")
	LU.assertEquals(StringUtil.TrimEnd("a	b\r\n"), "a	b")
	LU.assertEquals(StringUtil.TrimEnd("\na	b"), "\na	b")
	LU.assertEquals(StringUtil.TrimEnd("\na	b\n"), "\na	b")
	LU.assertEquals(StringUtil.TrimEnd("\na	b\r"), "\na	b")
	LU.assertEquals(StringUtil.TrimEnd("a	b\n"), "a	b")
	LU.assertEquals(StringUtil.TrimEnd("\na	b\n"), "\na	b")
	
	LU.assertError(function()
		StringUtil.TrimEnd(nil)
	end)
	LU.assertError(function()
		StringUtil.TrimEnd(1)
	end)
	LU.assertError(function()
		StringUtil.TrimEnd({"foo"})
	end)
end

return Test_StringUtil